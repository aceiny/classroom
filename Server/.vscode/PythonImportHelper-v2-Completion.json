[
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "EmailStr",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "EmailStr",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "EmailStr",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Gender",
        "importPath": "src.types.user_types",
        "description": "src.types.user_types",
        "isExtraImport": true,
        "detail": "src.types.user_types",
        "documentation": {}
    },
    {
        "label": "SignInOut",
        "importPath": "src.types.user_types",
        "description": "src.types.user_types",
        "isExtraImport": true,
        "detail": "src.types.user_types",
        "documentation": {}
    },
    {
        "label": "UserLoginDto",
        "importPath": "src.types.user_types",
        "description": "src.types.user_types",
        "isExtraImport": true,
        "detail": "src.types.user_types",
        "documentation": {}
    },
    {
        "label": "UserRegisterDto",
        "importPath": "src.types.user_types",
        "description": "src.types.user_types",
        "isExtraImport": true,
        "detail": "src.types.user_types",
        "documentation": {}
    },
    {
        "label": "prisma",
        "importPath": "src.prisma",
        "description": "src.prisma",
        "isExtraImport": true,
        "detail": "src.prisma",
        "documentation": {}
    },
    {
        "label": "prisma",
        "importPath": "src.prisma",
        "description": "src.prisma",
        "isExtraImport": true,
        "detail": "src.prisma",
        "documentation": {}
    },
    {
        "label": "prisma",
        "importPath": "src.prisma",
        "description": "src.prisma",
        "isExtraImport": true,
        "detail": "src.prisma",
        "documentation": {}
    },
    {
        "label": "prisma",
        "importPath": "src.prisma",
        "description": "src.prisma",
        "isExtraImport": true,
        "detail": "src.prisma",
        "documentation": {}
    },
    {
        "label": "prisma",
        "importPath": "src.prisma",
        "description": "src.prisma",
        "isExtraImport": true,
        "detail": "src.prisma",
        "documentation": {}
    },
    {
        "label": "prisma",
        "importPath": "src.prisma",
        "description": "src.prisma",
        "isExtraImport": true,
        "detail": "src.prisma",
        "documentation": {}
    },
    {
        "label": "prisma",
        "importPath": "src.prisma",
        "description": "src.prisma",
        "isExtraImport": true,
        "detail": "src.prisma",
        "documentation": {}
    },
    {
        "label": "prisma",
        "importPath": "src.prisma",
        "description": "src.prisma",
        "isExtraImport": true,
        "detail": "src.prisma",
        "documentation": {}
    },
    {
        "label": "encryptPassword",
        "importPath": "src.utils.auth",
        "description": "src.utils.auth",
        "isExtraImport": true,
        "detail": "src.utils.auth",
        "documentation": {}
    },
    {
        "label": "signJWT",
        "importPath": "src.utils.auth",
        "description": "src.utils.auth",
        "isExtraImport": true,
        "detail": "src.utils.auth",
        "documentation": {}
    },
    {
        "label": "validatePassword",
        "importPath": "src.utils.auth",
        "description": "src.utils.auth",
        "isExtraImport": true,
        "detail": "src.utils.auth",
        "documentation": {}
    },
    {
        "label": "JWTBearer",
        "importPath": "src.utils.auth",
        "description": "src.utils.auth",
        "isExtraImport": true,
        "detail": "src.utils.auth",
        "documentation": {}
    },
    {
        "label": "decodeJWT",
        "importPath": "src.utils.auth",
        "description": "src.utils.auth",
        "isExtraImport": true,
        "detail": "src.utils.auth",
        "documentation": {}
    },
    {
        "label": "JWTBearer",
        "importPath": "src.utils.auth",
        "description": "src.utils.auth",
        "isExtraImport": true,
        "detail": "src.utils.auth",
        "documentation": {}
    },
    {
        "label": "decodeJWT",
        "importPath": "src.utils.auth",
        "description": "src.utils.auth",
        "isExtraImport": true,
        "detail": "src.utils.auth",
        "documentation": {}
    },
    {
        "label": "JWTBearer",
        "importPath": "src.utils.auth",
        "description": "src.utils.auth",
        "isExtraImport": true,
        "detail": "src.utils.auth",
        "documentation": {}
    },
    {
        "label": "decodeJWT",
        "importPath": "src.utils.auth",
        "description": "src.utils.auth",
        "isExtraImport": true,
        "detail": "src.utils.auth",
        "documentation": {}
    },
    {
        "label": "JWTBearer",
        "importPath": "src.utils.auth",
        "description": "src.utils.auth",
        "isExtraImport": true,
        "detail": "src.utils.auth",
        "documentation": {}
    },
    {
        "label": "decodeJWT",
        "importPath": "src.utils.auth",
        "description": "src.utils.auth",
        "isExtraImport": true,
        "detail": "src.utils.auth",
        "documentation": {}
    },
    {
        "label": "JWTBearer",
        "importPath": "src.utils.auth",
        "description": "src.utils.auth",
        "isExtraImport": true,
        "detail": "src.utils.auth",
        "documentation": {}
    },
    {
        "label": "decodeJWT",
        "importPath": "src.utils.auth",
        "description": "src.utils.auth",
        "isExtraImport": true,
        "detail": "src.utils.auth",
        "documentation": {}
    },
    {
        "label": "src.apis",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "src.apis",
        "description": "src.apis",
        "detail": "src.apis",
        "documentation": {}
    },
    {
        "label": "users",
        "importPath": "src.apis",
        "description": "src.apis",
        "isExtraImport": true,
        "detail": "src.apis",
        "documentation": {}
    },
    {
        "label": "auth",
        "importPath": "src.apis",
        "description": "src.apis",
        "isExtraImport": true,
        "detail": "src.apis",
        "documentation": {}
    },
    {
        "label": "classroom",
        "importPath": "src.apis",
        "description": "src.apis",
        "isExtraImport": true,
        "detail": "src.apis",
        "documentation": {}
    },
    {
        "label": "enrollment",
        "importPath": "src.apis",
        "description": "src.apis",
        "isExtraImport": true,
        "detail": "src.apis",
        "documentation": {}
    },
    {
        "label": "courswork",
        "importPath": "src.apis",
        "description": "src.apis",
        "isExtraImport": true,
        "detail": "src.apis",
        "documentation": {}
    },
    {
        "label": "submission",
        "importPath": "src.apis",
        "description": "src.apis",
        "isExtraImport": true,
        "detail": "src.apis",
        "documentation": {}
    },
    {
        "label": "router",
        "importPath": "src.apis.auth",
        "description": "src.apis.auth",
        "isExtraImport": true,
        "detail": "src.apis.auth",
        "documentation": {}
    },
    {
        "label": "router",
        "importPath": "src.apis.auth",
        "description": "src.apis.auth",
        "isExtraImport": true,
        "detail": "src.apis.auth",
        "documentation": {}
    },
    {
        "label": "router",
        "importPath": "src.apis.auth",
        "description": "src.apis.auth",
        "isExtraImport": true,
        "detail": "src.apis.auth",
        "documentation": {}
    },
    {
        "label": "router",
        "importPath": "src.apis.auth",
        "description": "src.apis.auth",
        "isExtraImport": true,
        "detail": "src.apis.auth",
        "documentation": {}
    },
    {
        "label": "CreateClassRoomDto",
        "importPath": "src.types.classroom_types",
        "description": "src.types.classroom_types",
        "isExtraImport": true,
        "detail": "src.types.classroom_types",
        "documentation": {}
    },
    {
        "label": "UpdateClassRoomDto",
        "importPath": "src.types.classroom_types",
        "description": "src.types.classroom_types",
        "isExtraImport": true,
        "detail": "src.types.classroom_types",
        "documentation": {}
    },
    {
        "label": "CreateClassRoomDto",
        "importPath": "src.types.classroom_types",
        "description": "src.types.classroom_types",
        "isExtraImport": true,
        "detail": "src.types.classroom_types",
        "documentation": {}
    },
    {
        "label": "UpdateClassRoomDto",
        "importPath": "src.types.classroom_types",
        "description": "src.types.classroom_types",
        "isExtraImport": true,
        "detail": "src.types.classroom_types",
        "documentation": {}
    },
    {
        "label": "CreateClassRoomDto",
        "importPath": "src.types.classroom_types",
        "description": "src.types.classroom_types",
        "isExtraImport": true,
        "detail": "src.types.classroom_types",
        "documentation": {}
    },
    {
        "label": "check_if_user_is_classroom_professor",
        "importPath": "src.utils.classroom",
        "description": "src.utils.classroom",
        "isExtraImport": true,
        "detail": "src.utils.classroom",
        "documentation": {}
    },
    {
        "label": "check_if_user_is_classroom_professor",
        "importPath": "src.utils.classroom",
        "description": "src.utils.classroom",
        "isExtraImport": true,
        "detail": "src.utils.classroom",
        "documentation": {}
    },
    {
        "label": "check_if_user_enrolleed_in_classroom",
        "importPath": "src.utils.classroom",
        "description": "src.utils.classroom",
        "isExtraImport": true,
        "detail": "src.utils.classroom",
        "documentation": {}
    },
    {
        "label": "check_if_user_is_classroom_professor",
        "importPath": "src.utils.classroom",
        "description": "src.utils.classroom",
        "isExtraImport": true,
        "detail": "src.utils.classroom",
        "documentation": {}
    },
    {
        "label": "check_if_user_enrolleed_in_classroom",
        "importPath": "src.utils.classroom",
        "description": "src.utils.classroom",
        "isExtraImport": true,
        "detail": "src.utils.classroom",
        "documentation": {}
    },
    {
        "label": "CreateCoursworkDto",
        "importPath": "src.types.courswork_types",
        "description": "src.types.courswork_types",
        "isExtraImport": true,
        "detail": "src.types.courswork_types",
        "documentation": {}
    },
    {
        "label": "CreateSubmissionDto",
        "importPath": "src.types.submission_types",
        "description": "src.types.submission_types",
        "isExtraImport": true,
        "detail": "src.types.submission_types",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "Self",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "HTTPBearer",
        "importPath": "fastapi.security",
        "description": "fastapi.security",
        "isExtraImport": true,
        "detail": "fastapi.security",
        "documentation": {}
    },
    {
        "label": "HTTPAuthorizationCredentials",
        "importPath": "fastapi.security",
        "description": "fastapi.security",
        "isExtraImport": true,
        "detail": "fastapi.security",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "bcrypt",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "bcrypt",
        "description": "bcrypt",
        "detail": "bcrypt",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "jwt",
        "description": "jwt",
        "detail": "jwt",
        "documentation": {}
    },
    {
        "label": "Prisma",
        "importPath": "prisma",
        "description": "prisma",
        "isExtraImport": true,
        "detail": "prisma",
        "documentation": {}
    },
    {
        "label": "Prisma",
        "importPath": "prisma",
        "description": "prisma",
        "isExtraImport": true,
        "detail": "prisma",
        "documentation": {}
    },
    {
        "label": "TestClient",
        "importPath": "fastapi.testclient",
        "description": "fastapi.testclient",
        "isExtraImport": true,
        "detail": "fastapi.testclient",
        "documentation": {}
    },
    {
        "label": "pytest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytest",
        "description": "pytest",
        "detail": "pytest",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "GZipMiddleware",
        "importPath": "fastapi.middleware.gzip",
        "description": "fastapi.middleware.gzip",
        "isExtraImport": true,
        "detail": "fastapi.middleware.gzip",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "src.apis.auth",
        "description": "src.apis.auth",
        "peekOfCode": "router = APIRouter(\n    prefix=\"/auth\",\n    tags=[\"auth\"],\n    responses={404: {\"description\": \"Not found\"}},\n)\n@router.post(\"/sign-in\")\nasync def sign_in(signIn: UserLoginDto):\n    user = await prisma.user.find_first(\n            where={\n                \"email\": signIn.email,",
        "detail": "src.apis.auth",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "src.apis.classroom",
        "description": "src.apis.classroom",
        "peekOfCode": "router = APIRouter(\n    prefix=\"/classroom\",\n    tags=[\"classroom\"],\n    responses={404: {\"description\": \"Not found\"}},\n)\n@router.get('/', tags=[\"classroom\"])\nasync def read_classrooms():\n    classrooms = await prisma.classroom.find_many()\n    return classrooms\n@router.post('/')",
        "detail": "src.apis.classroom",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "src.apis.courswork",
        "description": "src.apis.courswork",
        "peekOfCode": "router = APIRouter(\n    prefix=\"/courswork\",\n    tags=[\"courswork\"],\n    responses={404: {\"description\": \"Not found\"}},\n)\n@router.get('/{classroomId}')\nasync def get_classroom_all_coursworks(classroomId : str):\n    userId = \"clxgdek8c00007q5axo4hg1dc\"\n    await check_if_user_enrolleed_in_classroom(classroomId, userId)\n    classroom = await prisma.classroom.find_unique(",
        "detail": "src.apis.courswork",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "src.apis.enrollment",
        "description": "src.apis.enrollment",
        "peekOfCode": "router = APIRouter(\n    prefix=\"/enrollment\",\n    tags=[\"enrollment\"],\n    responses={404: {\"description\": \"Not found\"}},\n)\n@router.get('/me', tags=[\"enrollment\"])\nasync def get_enrollments():\n    userId = \"clxgdek8c00007q5axo4hg1dc\"\n    enrollment = await prisma.enrollment.find_many(\n        where={",
        "detail": "src.apis.enrollment",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "src.apis.submission",
        "description": "src.apis.submission",
        "peekOfCode": "router = APIRouter(\n    prefix=\"/submission\",\n    tags=[\"submission\"],\n    responses={404: {\"description\": \"Not found\"}},\n)\n@router.get('/{classroomId}')\nasync def get_classroom_all_submissions(classroomId : str,submission : CreateSubmissionDto):\n    userId = \"clxgdek8c00007q5axo4hg1dc\"\n    await check_if_user_is_classroom_professor(classroomId, userId)\n    submissions = await prisma.submission.find_many(",
        "detail": "src.apis.submission",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "src.apis.users",
        "description": "src.apis.users",
        "peekOfCode": "router = APIRouter(\n    prefix=\"/user\",\n    tags=[\"user\"],\n    responses={404: {\"description\": \"Not found\"}},\n)\n@router.get(\"/\")\nasync def read_users():\n    users = await prisma.user.find_many()\n    for user in users:\n        del user.password",
        "detail": "src.apis.users",
        "documentation": {}
    },
    {
        "label": "CreateClassRoomDto",
        "kind": 6,
        "importPath": "src.types.classroom_types",
        "description": "src.types.classroom_types",
        "peekOfCode": "class CreateClassRoomDto(BaseModel) : \n    name : str \nclass UpdateClassRoomDto(BaseModel) : \n    name : str",
        "detail": "src.types.classroom_types",
        "documentation": {}
    },
    {
        "label": "UpdateClassRoomDto",
        "kind": 6,
        "importPath": "src.types.classroom_types",
        "description": "src.types.classroom_types",
        "peekOfCode": "class UpdateClassRoomDto(BaseModel) : \n    name : str",
        "detail": "src.types.classroom_types",
        "documentation": {}
    },
    {
        "label": "CourseWorkType",
        "kind": 6,
        "importPath": "src.types.courswork_types",
        "description": "src.types.courswork_types",
        "peekOfCode": "class CourseWorkType(Enum):\n    Assignment = \"Assignment\"\n    Quiz = \"Quiz\"\n    Exam = \"Exam\"\n    Project = \"Project\"\n    Other = \"Other\"\nclass CreateCoursworkDto(BaseModel):\n    title: str\n    description: str\n    due_date: datetime.datetime",
        "detail": "src.types.courswork_types",
        "documentation": {}
    },
    {
        "label": "CreateCoursworkDto",
        "kind": 6,
        "importPath": "src.types.courswork_types",
        "description": "src.types.courswork_types",
        "peekOfCode": "class CreateCoursworkDto(BaseModel):\n    title: str\n    description: str\n    due_date: datetime.datetime\n    type: CourseWorkType",
        "detail": "src.types.courswork_types",
        "documentation": {}
    },
    {
        "label": "CreateSubmissionDto",
        "kind": 6,
        "importPath": "src.types.submission_types",
        "description": "src.types.submission_types",
        "peekOfCode": "class CreateSubmissionDto(BaseModel):\n    content : str\n    files : list[str]\n    coursworkId : str",
        "detail": "src.types.submission_types",
        "documentation": {}
    },
    {
        "label": "Gender",
        "kind": 6,
        "importPath": "src.types.user_types",
        "description": "src.types.user_types",
        "peekOfCode": "class Gender(Enum):\n    Male = \"Male\"\n    Female = \"Female\"\nclass UserRole(Enum) : \n    Student = \"Student\"\n    Professor = \"Professor\"\nclass UserLoginDto(BaseModel) : \n    email : EmailStr\n    password : str\nclass UserRegisterDto(BaseModel) : ",
        "detail": "src.types.user_types",
        "documentation": {}
    },
    {
        "label": "UserRole",
        "kind": 6,
        "importPath": "src.types.user_types",
        "description": "src.types.user_types",
        "peekOfCode": "class UserRole(Enum) : \n    Student = \"Student\"\n    Professor = \"Professor\"\nclass UserLoginDto(BaseModel) : \n    email : EmailStr\n    password : str\nclass UserRegisterDto(BaseModel) : \n    name : str \n    email : EmailStr \n    password : str",
        "detail": "src.types.user_types",
        "documentation": {}
    },
    {
        "label": "UserLoginDto",
        "kind": 6,
        "importPath": "src.types.user_types",
        "description": "src.types.user_types",
        "peekOfCode": "class UserLoginDto(BaseModel) : \n    email : EmailStr\n    password : str\nclass UserRegisterDto(BaseModel) : \n    name : str \n    email : EmailStr \n    password : str\n    gender : Gender\n    role : UserRole\nclass SignInOut(BaseModel):",
        "detail": "src.types.user_types",
        "documentation": {}
    },
    {
        "label": "UserRegisterDto",
        "kind": 6,
        "importPath": "src.types.user_types",
        "description": "src.types.user_types",
        "peekOfCode": "class UserRegisterDto(BaseModel) : \n    name : str \n    email : EmailStr \n    password : str\n    gender : Gender\n    role : UserRole\nclass SignInOut(BaseModel):\n    token: str\n    id : str",
        "detail": "src.types.user_types",
        "documentation": {}
    },
    {
        "label": "SignInOut",
        "kind": 6,
        "importPath": "src.types.user_types",
        "description": "src.types.user_types",
        "peekOfCode": "class SignInOut(BaseModel):\n    token: str\n    id : str",
        "detail": "src.types.user_types",
        "documentation": {}
    },
    {
        "label": "JWTBearer",
        "kind": 6,
        "importPath": "src.utils.auth",
        "description": "src.utils.auth",
        "peekOfCode": "class JWTBearer(HTTPBearer):\n    def __init__(self, auto_error: bool = True):\n        super(JWTBearer, self).__init__(auto_error=auto_error)\n    async def __call__(self, request: Request):\n        credentials: HTTPAuthorizationCredentials = await super(\n            JWTBearer, self\n        ).__call__(request)\n        if credentials:\n            if not credentials.scheme == \"Bearer\":\n                raise HTTPException(",
        "detail": "src.utils.auth",
        "documentation": {}
    },
    {
        "label": "signJWT",
        "kind": 2,
        "importPath": "src.utils.auth",
        "description": "src.utils.auth",
        "peekOfCode": "def signJWT(user_id: str) -> Dict[str, str]:\n    EXPIRES = datetime.now(tz=timezone.utc) + timedelta(days=365)\n    payload = {\n        \"exp\": EXPIRES,\n        \"userId\": user_id,\n    }\n    token = jwt.encode(payload, jwtSecret, algorithm=\"HS256\")\n    return token\ndef decodeJWT(token: str) -> dict:\n    try:",
        "detail": "src.utils.auth",
        "documentation": {}
    },
    {
        "label": "decodeJWT",
        "kind": 2,
        "importPath": "src.utils.auth",
        "description": "src.utils.auth",
        "peekOfCode": "def decodeJWT(token: str) -> dict:\n    try:\n        decoded = jwt.decode(token, jwtSecret, algorithms=[\"HS256\"])\n        print(decoded)\n        return decoded if decoded[\"exp\"] else None\n    except jwt.ExpiredSignatureError:\n        raise HTTPException(status_code=403, detail=\"Token expired.\")\n    except:\n        raise HTTPException(status_code=403, detail=\"Invalid token.\")\ndef encryptPassword(password: str) -> str:",
        "detail": "src.utils.auth",
        "documentation": {}
    },
    {
        "label": "encryptPassword",
        "kind": 2,
        "importPath": "src.utils.auth",
        "description": "src.utils.auth",
        "peekOfCode": "def encryptPassword(password: str) -> str:\n    return bcrypt.hashpw(password.encode(\"utf-8\"), bcrypt.gensalt()).decode(\"utf-8\")\ndef validatePassword(password: str, encrypted: str) -> str:\n    return bcrypt.checkpw(password.encode(\"utf-8\"), encrypted.encode(\"utf-8\"))\nclass JWTBearer(HTTPBearer):\n    def __init__(self, auto_error: bool = True):\n        super(JWTBearer, self).__init__(auto_error=auto_error)\n    async def __call__(self, request: Request):\n        credentials: HTTPAuthorizationCredentials = await super(\n            JWTBearer, self",
        "detail": "src.utils.auth",
        "documentation": {}
    },
    {
        "label": "validatePassword",
        "kind": 2,
        "importPath": "src.utils.auth",
        "description": "src.utils.auth",
        "peekOfCode": "def validatePassword(password: str, encrypted: str) -> str:\n    return bcrypt.checkpw(password.encode(\"utf-8\"), encrypted.encode(\"utf-8\"))\nclass JWTBearer(HTTPBearer):\n    def __init__(self, auto_error: bool = True):\n        super(JWTBearer, self).__init__(auto_error=auto_error)\n    async def __call__(self, request: Request):\n        credentials: HTTPAuthorizationCredentials = await super(\n            JWTBearer, self\n        ).__call__(request)\n        if credentials:",
        "detail": "src.utils.auth",
        "documentation": {}
    },
    {
        "label": "jwtSecret",
        "kind": 5,
        "importPath": "src.utils.auth",
        "description": "src.utils.auth",
        "peekOfCode": "jwtSecret = os.environ.get(\"JWT_SECRET\")\ndef signJWT(user_id: str) -> Dict[str, str]:\n    EXPIRES = datetime.now(tz=timezone.utc) + timedelta(days=365)\n    payload = {\n        \"exp\": EXPIRES,\n        \"userId\": user_id,\n    }\n    token = jwt.encode(payload, jwtSecret, algorithm=\"HS256\")\n    return token\ndef decodeJWT(token: str) -> dict:",
        "detail": "src.utils.auth",
        "documentation": {}
    },
    {
        "label": "prisma",
        "kind": 5,
        "importPath": "src.prisma",
        "description": "src.prisma",
        "peekOfCode": "prisma = Prisma()",
        "detail": "src.prisma",
        "documentation": {}
    },
    {
        "label": "test_root",
        "kind": 2,
        "importPath": "test.test_main",
        "description": "test.test_main",
        "peekOfCode": "def test_root():\n    response = client.get(\"/\")\n    assert response.status_code == 200",
        "detail": "test.test_main",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "test.test_main",
        "description": "test.test_main",
        "peekOfCode": "client = TestClient(app)\nprisma = Prisma()\ndef test_root():\n    response = client.get(\"/\")\n    assert response.status_code == 200",
        "detail": "test.test_main",
        "documentation": {}
    },
    {
        "label": "prisma",
        "kind": 5,
        "importPath": "test.test_main",
        "description": "test.test_main",
        "peekOfCode": "prisma = Prisma()\ndef test_root():\n    response = client.get(\"/\")\n    assert response.status_code == 200",
        "detail": "test.test_main",
        "documentation": {}
    },
    {
        "label": "read_root",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def read_root():\n    return {\"version\": \"1.0.0\"}",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "app = FastAPI()\napp.add_middleware(GZipMiddleware, minimum_size=1000)\n@app.on_event(\"startup\")\nasync def startup():\n    await prisma.connect()\n@app.on_event(\"shutdown\")\nasync def shutdown():\n    await prisma.disconnect()\napp.include_router(users.router)\napp.include_router(auth.router)",
        "detail": "main",
        "documentation": {}
    }
]